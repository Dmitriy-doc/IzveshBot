from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from docx import Document
from datetime import datetime
import os

API_TOKEN = os.getenv("7518865505:AAEdCzkLa10pGA6N4uRyuy2CTDAQP0w-IOQ")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –®–∞–≥–∏ –¥–ª—è FSM
class Form(StatesGroup):
    doctor_name = State()
    patient_name = State()
    diagnosis = State()
    lab_results = State()

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add(KeyboardButton("\ud83d\udcdc –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ"))

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=start_keyboard)

@dp.message_handler(lambda message: message.text == "\ud83d\udcdc –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ")
async def start_form(message: types.Message):
    await Form.doctor_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤—Ä–∞—á–∞:")

@dp.message_handler(state=Form.doctor_name)
async def process_doctor(message: types.Message, state: FSMContext):
    await state.update_data(doctor_name=message.text)
    await Form.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")

@dp.message_handler(state=Form.patient_name)
async def process_patient(message: types.Message, state: FSMContext):
    await state.update_data(patient_name=message.text)
    await Form.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑:")

@dp.message_handler(state=Form.diagnosis)
async def process_diagnosis(message: types.Message, state: FSMContext):
    await state.update_data(diagnosis=message.text)
    await Form.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")

@dp.message_handler(state=Form.lab_results)
async def process_lab(message: types.Message, state: FSMContext):
    await state.update_data(lab_results=message.text)
    data = await state.get_data()

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc = Document()
    doc.add_heading("–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–µ—â–µ–Ω–∏–µ", level=1)
    doc.add_paragraph(f"–§–ò–û –≤—Ä–∞—á–∞: {data['doctor_name']}")
    doc.add_paragraph(f"–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞: {data['patient_name']}")
    doc.add_paragraph(f"–î–∏–∞–≥–Ω–æ–∑: {data['diagnosis']}")
    doc.add_paragraph(f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data['lab_results']}")
    filename = f"izvesh_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
    doc.save(filename)

    with open(filename, "rb") as file:
        await bot.send_document(chat_id=message.chat.id, document=file)

    os.remove(filename)
    await message.answer("–§–∞–π–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ –∏–∑–≤–µ—â–µ–Ω–∏–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ 'üìù –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ'.", reply_markup=start_keyboard)
    await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
