from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from docx import Document
from datetime import datetime
import os

# –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ Render)
API_TOKEN = os.getenv("7518865505:AAEdCzkLa10pGA6N4uRyuy2CTDAQP0w-IOQ")

bot = Bot(token=API_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    doctor_name = State()
    patient_name = State()
    diagnosis   = State()
    lab_results = State()

start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add(KeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ"))

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=start_keyboard)

@dp.message_handler(lambda msg: msg.text == "üìù –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ", state='*')
async def start_form(message: types.Message):
    await Form.doctor_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤—Ä–∞—á–∞:")

@dp.message_handler(state=Form.doctor_name)
async def process_doctor_name(message: types.Message, state: FSMContext):
    await state.update_data(doctor_name=message.text)
    await Form.patient_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")

@dp.message_handler(state=Form.patient_name)
async def process_patient_name(message: types.Message, state: FSMContext):
    await state.update_data(patient_name=message.text)
    await Form.diagnosis.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑:")

@dp.message_handler(state=Form.diagnosis)
async def process_diagnosis(message: types.Message, state: FSMContext):
    await state.update_data(diagnosis=message.text)
    await Form.lab_results.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")

@dp.message_handler(state=Form.lab_results)
async def process_lab(message: types.Message, state: FSMContext):
    await state.update_data(lab_results=message.text)
    data = await state.get_data()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc = Document()
    doc.add_heading("–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–µ—â–µ–Ω–∏–µ", level=1)
    doc.add_paragraph(f"–í—Ä–∞—á: {data['doctor_name']}")
    doc.add_paragraph(f"–ü–∞—Ü–∏–µ–Ω—Ç: {data['patient_name']}")
    doc.add_paragraph(f"–î–∏–∞–≥–Ω–æ–∑: {data['diagnosis']}")
    doc.add_paragraph(f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data['lab_results']}")
    
    filename = f"izvesh_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
    doc.save(filename)
    
    with open(filename, "rb") as file:
        await message.answer_document(file, caption="–í–æ—Ç –≤–∞—à–µ –∏–∑–≤–µ—â–µ–Ω–∏–µ üìÑ")

    os.remove(filename)

    await message.answer("–ò–∑–≤–µ—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ. –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ \"üìù –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ\".", 
                         reply_markup=start_keyboard)
    await state.finish()

@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ \"üìù –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ\".")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
