import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from docxtpl import DocxTemplate
from aiogram.types import FSInputFile

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å INFO —É—Ä–æ–≤–µ–Ω—å)
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN not found. Please set the BOT_TOKEN environment variable.")
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class Form(StatesGroup):
    destination = State()       # –ö—É–¥–∞ (–ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞)
    fullname = State()          # –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ª–∏—Ü–∞)
    additional = State()        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
router = dp.include_router(types.Router())  # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º Router –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì –∑–∞–ø—É—Å–∫–∞–µ—Ç FSM
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    # –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã: —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É (destination)
    await state.set_state(Form.destination)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç.\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ FSM: –ø–æ–ª—É—á–∞—Ç–µ–ª—å (destination)
@router.message(Form.destination)
async def process_destination(message: types.Message, state: FSMContext) -> None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤—ë–ª)
    dest_text = message.text.strip() if message.text else ""
    await state.update_data(destination=dest_text)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É: –≤–≤–æ–¥ –§–ò–û
    await state.set_state(Form.fullname)
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û (–º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ FSM: –§–ò–û (fullname)
@router.message(Form.fullname)
async def process_fullname(message: types.Message, state: FSMContext) -> None:
    name_text = message.text.strip() if message.text else ""
    await state.update_data(fullname=name_text)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è
    await state.set_state(Form.additional)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ FSM: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è
@router.message(Form.additional)
async def process_additional(message: types.Message, state: FSMContext) -> None:
    add_text = message.text.strip() if message.text else ""
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ FSM (destination –∏ fullname –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤)
    user_data = await state.get_data()
    user_data["additional"] = add_text
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ "–û—Ç–∫—É–¥–∞" –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    user_data["from_org"] = "–î–ö–¶ –∏–º. –õ.–ú. –†–æ—à–∞–ª—è"
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é docxtpl
    try:
        template = DocxTemplate("template.docx")  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É .docx
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ ({e})")
        await state.clear()
        return
    try:
        template.render(user_data)  # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await state.clear()
        return
    output_filename = "result.docx"
    try:
        template.save(output_filename)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await state.clear()
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è .docx —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        doc_file = FSInputFile(output_filename)
        await message.answer_document(doc_file, caption="üìÑ –í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {e}")
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –∑–∞–≤–µ—Ä—à–∞—è –¥–∏–∞–ª–æ–≥
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
@router.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext) -> None:
    # –û—Ç–º–µ–Ω—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await message.answer("üö´ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling, –ø—Ä–æ–ø—É—Å–∫–∞—è –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
