from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from docxtpl import DocxTemplate
from datetime import datetime
import os

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∞
TOKEN = "7518865505:AAEdCzkLa10pGA6N4uRyuy2CTDAQP0w-IOQ"

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add(KeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ"))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_data = {}

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–µ—â–µ–Ω–∏–µ.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=start_keyboard)

@dp.message_handler(lambda message: message.text == "üìù –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ")
async def start_report(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤—Ä–∞—á–∞:")
    user_data[message.from_user.id]["step"] = "fio"

@dp.message_handler()
async def handle_all_messages(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –ü–æ–¥–∞—Ç—å –∏–∑–≤–µ—â–µ–Ω–∏–µ', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    step = user_data[user_id].get("step")

    if step == "fio":
        user_data[user_id]["doctor"] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
        user_data[user_id]["step"] = "patient"

    elif step == "patient":
        user_data[user_id]["patient"] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑:")
        user_data[user_id]["step"] = "diagnosis"

    elif step == "diagnosis":
        user_data[user_id]["diagnosis"] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        user_data[user_id]["step"] = "lab"

    elif step == "lab":
        user_data[user_id]["lab"] = message.text

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–∑–≤–µ—â–µ–Ω–∏–µ
        doc = DocxTemplate("template.docx")

        context = {
            "doctor": user_data[user_id]["doctor"],
            "hospital": "–ì–ë–£–ó –ú–û –î–ö–¶ –∏–º. –õ.–ú. –†–æ—à–∞–ª—è",
            "patient": user_data[user_id]["patient"],
            "diagnosis": user_data[user_id]["diagnosis"],
            "lab": user_data[user_id]["lab"],
            "date": datetime.today().strftime("%d.%m.%Y"),
        }

        output_file = f"notification_{user_id}.docx"
        doc.render(context)
        doc.save(output_file)

        with open(output_file, "rb") as f:
            await message.answer_document(f, caption="üìÑ –ì–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        
        os.remove(output_file)
        user_data.pop(user_id, None)

        await message.answer("–ò–∑–≤–µ—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=start_keyboard)

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp)
